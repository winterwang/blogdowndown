blogdown::new_site()
blogdown::install_theme("gcushen/hugo-academic")
servr::daemon_stop(1)
blogdown::serve_site()
servr::daemon_stop(2)
install.packages(c("bookdown", "DT", "kernlab", "knitr", "pagedown", "roxygen2", "rticles", "testit", "xfun"))
install.packages(c("bookdown", "DT", "kernlab", "knitr", "pagedown", "roxygen2", "rticles", "testit", "xfun"))
blogdown::serve_site()
servr::daemon_stop(1)
blogdown::serve_site()
servr::daemon_stop(2)
blogdown::serve_site()
servr::daemon_stop(3)
blogdown::serve_site()
servr::daemon_stop(4)
blogdown::serve_site()
servr::daemon_stop(5)
Salary <- read.table("https://raw.githubusercontent.com/winterwang/RStanBook/master/chap04/input/data-salary.txt",
sep = ",", header = T)
library(ggplot2)
ggplot(Salary, aes(x = X, y = Y)) +
geom_point(shape = 1, size = 4)  + theme(plot.subtitle = element_text(vjust = 1),
plot.caption = element_text(vjust = 1),
axis.line = element_line(colour = "bisque4",
size = 0.2, linetype = "solid"),
axis.ticks = element_line(size = 0.7),
axis.title = element_text(size = 16),
axis.text = element_text(size = 16, colour = "gray0"),
panel.background = element_rect(fill = "gray98")) +
scale_y_continuous(limits = c(200, 1400), breaks = c(200, 600, 1000, 1400))
res_lm <- lm(Y ~ X, data = Salary)
summary(res_lm)
# 用這個線性回歸模型來對上面模型中的參數作出預測：
X_new <- data.frame(X=23:60)
conf_95 <- predict(res_lm, X_new, interval = "confidence", level = 0.95)
pred_95 <- predict(res_lm, X_new, interval = "prediction", level = 0.95)
temp_var <- predict(res_lm, interval="prediction")
new_df <- cbind(Salary, temp_var)
ggplot(new_df, aes(x = X, y = Y)) +
geom_point(shape = 1, size = 4)  + theme(plot.subtitle = element_text(vjust = 1),
plot.caption = element_text(vjust = 1),
axis.line = element_line(colour = "bisque4",
size = 0.2, linetype = "solid"),
axis.ticks = element_line(size = 0.7),
axis.title = element_text(size = 16),
axis.text = element_text(size = 16, colour = "gray0"),
panel.background = element_rect(fill = "gray98")) +
geom_smooth(method = lm, se=TRUE, size = 0.3)+
scale_y_continuous(limits = c(200, 1400), breaks = c(200, 600, 1000, 1400)) +
geom_line(aes(y=lwr), color = "red", linetype = "dashed")+
geom_line(aes(y=upr), color = "red", linetype = "dashed")
library(rstan)
data <- list(N=nrow(Salary), X=Salary$X, Y = Salary$Y)
fit <- sampling(model4_5, data, seed = 1234)
print(fit)
library(ggmcmc)
ggmcmc(ggs(fit, inc_warmup = TRUE, stan_include_auxiliar = TRUE), plot = "traceplot", dev_type_html = "png",
file = "trace.html")
library(ggmcmc)
ggmcmc(ggs(fit, inc_warmup = TRUE, stan_include_auxiliar = TRUE), plot = "traceplot", dev_type_html = "png",
file = "trace.html")
knitr::include_graphics("/img/traceplot-model4-5.png")
library(bayesplot)
color_scheme_set("mix-brightblue-gray")
posterior2 <- rstan::extract(fit, inc_warmup = TRUE, permuted = FALSE)
p <- mcmc_trace(posterior2, n_warmup = 0,
facet_args = list(nrow = 2, labeller = label_parsed))
p
p <- mcmc_acf_bar(posterior2)
p
p <- mcmc_acf_bar(posterior2)
p
p <- mcmc_dens_overlay(posterior2, color_chains = T)
p
# library(rstan) uncomment if run for the first time
data <- list(N=nrow(Salary), X=Salary$X, Y = Salary$Y)
fit2 <- sampling(
model4_5,
data = data,
pars = c("b", "sigma"),
init = function(){
list(a = runif(1, -10, 10), b = runif(1, 0, 10), sigma = 10)
},
seed = 123,
chains = 3, iter = 1000, warmup = 200, thin = 2
)
print(fit2)
parallel::detectCores() #我的桌上型電腦有8個核可以用於平行計算
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
ms <- rstan::extract(fit)
quantile(ms$b, probs = c(0.025, 0.975))
d_mcmc <- data.frame(a = ms$a, b = ms$b, sigma = ms$sigma)
head(d_mcmc)
p1 <- ggplot(d_mcmc, aes(x = a, y = b)) +
geom_point(shape = 1, size = 4)
ggExtra::ggMarginal(
p = p1,
type = 'density',
margins = 'both',
size = 4,
colour = 'black',
fill = '#2D077A'
)
N_mcmc <- length(ms$lp__)
y50_base <- ms$a + ms$b*50
y50 <- rnorm(n = N_mcmc, mean = y50_base, sd = ms$sigma)
d_mcmc <- data.frame(a = ms$a, b = ms$b, sigma = ms$sigma, y50_base, y50)
head(d_mcmc)
# the following codes are also available from the author's page:
# https://github.com/MatsuuraKentaro/RStanBook/blob/master/chap04/fig4-8.R
# library(ggplot2)
source('commonRstan.R')
# the following codes are also available from the author's page:
# https://github.com/MatsuuraKentaro/RStanBook/blob/master/chap04/fig4-8.R
# library(ggplot2)
source('commonRstan.R')
# load('output/result-model4-5.RData')
ms <- rstan::extract(fit)
X_new <- 23:60
N_X <- length(X_new)
N_mcmc <- length(ms$lp__)
set.seed(1234)
y_base_mcmc <- as.data.frame(matrix(nrow=N_mcmc, ncol=N_X))
y_mcmc <- as.data.frame(matrix(nrow=N_mcmc, ncol=N_X))
for (i in 1:N_X) {
y_base_mcmc[,i] <- ms$a + ms$b * X_new[i]
y_mcmc[,i] <- rnorm(n=N_mcmc, mean=y_base_mcmc[,i], sd=ms$sigma)
}
customize.ggplot.axis <- function(p) {
p <- p + labs(x='X', y='Y')
p <- p + scale_y_continuous(breaks=seq(from=200, to=1400, by=400))
p <- p + coord_cartesian(xlim=c(22, 61), ylim=c(200, 1400))
return(p)
}
d_est <- data.frame.quantile.mcmc(x=X_new, y_mcmc=y_base_mcmc)
p <- ggplot.5quantile(data=d_est)
p <- p + geom_point(data=Salary, aes(x=X, y=Y), shape=1, size=3)
p <- customize.ggplot.axis(p)
# ggsave(file='output/fig4-8-left.png', plot=p, dpi=300, w=4, h=3)
p
d_est <- data.frame.quantile.mcmc(x=X_new, y_mcmc=y_mcmc)
p <- ggplot.5quantile(data=d_est)
p <- p + geom_point(data=Salary, aes(x=X, y=Y), shape=1, size=3)
p <- customize.ggplot.axis(p)
p
# ggsave(file='output/fig4-8-right.png', plot=p, dpi=300, w=4, h=3)
set.seed(123)
N1 <- 30
N2 <- 20
Y1 <- rnorm(n=N1, mean=0, sd=5)
Y2 <- rnorm(n=N2, mean=1, sd=4)
d1 <- data.frame(group=1, Y=Y1)
d2 <- data.frame(group=2, Y=Y2)
d <- rbind(d1, d2)
d$group <- as.factor(d$group)
p <- ggplot(data=d, aes(x=group, y=Y, group=group, col=group))
p <- p + geom_boxplot(outlier.size=0)
p <- p + geom_point(position=position_jitter(w=0.4, h=0), size=2)
p
#ggsave(file='fig-ex1.png', plot=p, dpi=300, w=4, h=3)
library(rstan)
data <- list(N1=N1, N2=N2, Y1=Y1, Y2=Y2)
exe13 <- stan_model(file = "stanfiles/ex3.stan")
fit <- sampling(exe13, data=data, seed=1234)
fit
library(rstan)
data <- list(N1=N1, N2=N2, Y1=Y1, Y2=Y2)
exe15 <- stan_model(file = "stanfiles/ex5.stan")
fit <- sampling(exe15, data=data, seed=1234)
fit
ms <- extract(fit)
library(rstan)
data <- list(N1=N1, N2=N2, Y1=Y1, Y2=Y2)
exe15 <- stan_model(file = "stanfiles/ex5.stan")
fit <- sampling(exe15, data=data, seed=1234)
fit
ms <- rstan::extract(fit)
prob <- mean(ms$mu1 < ms$mu2)  #=> 0.93725
prob
blogdown::serve_site()
servr::daemon_stop(7)
servr::daemon_stop(8)
servr::daemon_stop(6)
blogdown::serve_site()
